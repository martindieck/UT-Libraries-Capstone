# -*- coding: utf-8 -*-
"""Project name.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBrL4g8Vsi811rYH0_g2UqSHStazAEXb
"""

import pandas as pd
import re

def split_project_name(project_name):
    if pd.isna(project_name):
        return None, None, None  # Handle NaN values gracefully by returning None for all parts

    # Check if the project name starts with "St." followed by any words and ends with a period.
    # This matches names like "St. Andrew Presbyterian Church." or "St. Maryâ€™s Hall."
    st_pattern = r'^St\.\s+\w+.*\.$'
    if re.match(st_pattern, project_name):
        return project_name.strip(), None, None

    # Regular expression pattern to match the building name and campus/complex name
    pattern = r'^(.*?)(\.)(?:(?!(?:St\.?\s+\w+(?:\s+\w+)*))(.*)(\b(?i:School|Branch|dormitory|Building|housing|office|center|parking|gym|bank|hotel|auditorium|dorms|room|gymnasium|pool|store|street|floor|buildings|porch|hall|ward|cottage|station|library|lobby|storefront|warehouse|tower|fireplace|dormitories|church|cafeteria|memorial|garage|gallery|mueseum|club|theater|park|house|entrance|chapel|lodge|lake|restaurant|shop|apartments|lounge|lab|plant|plot|wing|elevator|palace|temple|mall|garden|showroom|pharmacy|hospital|campus|laboratory|field|quarters|ground|residence|hill|Pavillion|mill|stadium|block|observatory|department|avenue|courts)\b.*?)(\.)|(?:(St\.?\s+\w+(?:\s+\w+)*))(.*))(.*$)'
    match = re.match(pattern, project_name)

    if match:
        if match.group(3) is not None:
            part1 = match.group(1).strip() + match.group(2) + match.group(3).strip() + match.group(4) + match.group(5)
            part2 = match.group(3).strip() + match.group(4)
        else:
            part1 = match.group(1).strip() + (match.group(6) if match.group(6) is not None else '') + (match.group(7) if match.group(7) is not None else '')
            part2 = match.group(7) if match.group(7) is not None else None
        part3 = match.group(1).strip()
        return part1, part2, part3
    else:
        first_period_index = project_name.find('.')
        if first_period_index != -1:
            return project_name[:first_period_index], None, None
        else:
            return None, None, None

# Read the CSV file into a DataFrame with low_memory option to suppress warnings
df = pd.read_csv('AAA_Proj_db_csv_version.csv', low_memory=False)

# Apply the function to the 'Project name' column
df[['Place name[1]', 'Place name[2]', 'Place name[3]']] = pd.DataFrame(df['Project name'].apply(split_project_name).tolist(), index=df.index)

# Include the 'Unique ID' and reorder the columns to include the new ones as desired
df = df[['unique ID', 'Project name', 'Place name[1]', 'Place name[2]', 'Place name[3]']]

# Save the modified DataFrame back to a CSV file
df.to_csv('new_output_file3.csv', index=False)

# Display the DataFrame with the extracted columns
print(df)

import pandas as pd
import re

def split_project_name(project_name):
    if pd.isna(project_name):
        return None, None, None, 1  # Return 1 as the flag if the project name is NaN

    # Special case handling for "St." with specific formatting
    st_pattern = r'^St\.\s+\w+.*\.$'
    if re.match(st_pattern, project_name):
        return project_name.strip(), None, None, 0  # Pattern matches, so flag is 0

    # Regular expression pattern for splitting
    pattern = r'^(.*?)(\.)(?:(?!(?:St\.?\s+\w+(?:\s+\w+)*))(.*)(\b(?i:School|Branch|dormitory|Building|housing|office|center|parking|gym|bank|hotel|auditorium|dorms|room|gymnasium|pool|store|street|floor|buildings|porch|hall|ward|cottage|station|library|lobby|storefront|warehouse|tower|fireplace|dormitories|church|cafeteria|memorial|garage|gallery|mueseum|club|theater|park|house|entrance|chapel|lodge|lake|restaurant|shop|apartments|lounge|lab|plant|plot|wing|elevator|palace|temple|mall|garden|showroom|pharmacy|hospital|campus|laboratory|field|quarters|ground|residence|hill|Pavilion|mill|stadium|block|observatory|department|avenue|courts)\b.*?)(\.)|(?:(St\.?\s+\w+(?:\s+\w+)*))(.*))(.*$)'
    match = re.match(pattern, project_name)

    if match:
        # Handling based on matching groups
        if match.group(3) is not None:
            part1 = match.group(1).strip() + match.group(2) + match.group(3).strip() + match.group(4) + match.group(5)
            part2 = match.group(3).strip() + match.group(4)
        else:
            part1 = match.group(1).strip() + (match.group(6) if match.group(6) is not None else '') + (match.group(7) if match.group(7) is not None else '')
            part2 = match.group(7) if match.group(7) is not None else None
        part3 = match.group(1).strip()
        return part1, part2, part3, 0  # Pattern matches, so flag is 0
    else:
        # If pattern does not match
        first_period_index = project_name.find('.')
        if first_period_index != -1:
            return project_name[:first_period_index], None, None, 1
        else:
            return None, None, None, 1

# Read the CSV file
df = pd.read_csv('AAA_Proj_db_csv_version.csv', low_memory=False)

# Apply the function and create the columns
df[['Place name[1]', 'Place name[2]', 'Place name[3]', 'project_name_flag']] = pd.DataFrame(df['Project name'].apply(split_project_name).tolist(), index=df.index)

# Include the 'Unique ID' and reorder the columns to include the new ones as desired
df = df[['unique ID', 'Project name', 'Place name[1]', 'Place name[2]', 'Place name[3]', 'project_name_flag']]

# Save the modified DataFrame back to a CSV file
df.to_csv('new_output_file_try.csv', index=False)

# Print the DataFrame with the new columns
print(df)